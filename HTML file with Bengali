<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Talk & Translate</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <style>
    body {
      background-color: #f8f9fa;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .app-container {
      max-width: 900px;
      margin: auto;
    }
    .listening {
      animation: glow 1s infinite alternate;
      box-shadow: 0 0 12px 5px rgba(0, 123, 255, 0.6);
      background-color: #007bff !important;
      color: white;
    }
    @keyframes glow {
      from {
        box-shadow: 0 0 6px 2px rgba(0, 123, 255, 0.3);
      }
      to {
        box-shadow: 0 0 16px 8px rgba(0, 123, 255, 0.7);
      }
    }
    .expandable-text {
      resize: vertical;
    }
    .toast {
      opacity: 1 !important;
    }
  </style>
</head>
<body>
  <div class="app-container container mt-5 p-4 bg-white rounded shadow" role="main">
    <h2 class="text-center text-primary mb-4">üó£Ô∏è Talk & Translate</h2>

    <div class="d-flex flex-column flex-md-row justify-content-between gap-3 mb-3">
      <div class="flex-fill">
        <label for="inputLang" class="form-label">Input Language</label>
        <select id="inputLang" class="form-select" aria-label="Select input language">
          <option value="auto">Auto Detect</option>
          <option value="en">English</option>
          <option value="bn" selected>Bengali</option>
          <option value="es">Spanish</option>
          <option value="fr">French</option>
          <option value="de">German</option>
          <option value="hi">Hindi</option>
          <option value="ja">Japanese</option>
        </select>
      </div>

      <div class="d-flex flex-column justify-content-end">
        <button type="button" onclick="swapLanguages()" class="btn btn-light mt-4" title="Swap Languages">‚áÑ</button>
      </div>

      <div class="flex-fill">
        <label for="outputLang" class="form-label">Translate To</label>
        <select id="outputLang" class="form-select" aria-label="Select output language">
          <option value="en">English</option>
          <option value="bn">Bengali</option>
          <option value="es">Spanish</option>
          <option value="fr">French</option>
          <option value="de">German</option>
          <option value="hi">Hindi</option>
          <option value="ja">Japanese</option>
        </select>
      </div>
    </div>

    <div class="mb-3">
      <label for="inputText" class="form-label">Input</label>
      <div class="position-relative">
        <textarea
          id="inputText"
          class="form-control expandable-text"
          rows="5"
          aria-label="Input text area"
          placeholder="Enter text or use the microphone..."
        ></textarea>
        <button
          class="btn btn-sm btn-outline-secondary position-absolute top-0 end-0 m-1"
          onclick="toggleFullscreen('inputText')"
          aria-label="Toggle fullscreen for input textarea"
          title="Toggle fullscreen"
        >‚§¢</button>
      </div>
    </div>

    <div class="d-flex flex-wrap justify-content-between gap-2 mb-3">
      <div class="d-flex gap-2">
        <button
          id="startBtn"
          type="button"
          onclick="startDictation()"
          class="btn btn-primary d-flex align-items-center gap-2"
          aria-label="Start speech input"
        >
          <span
            class="spinner-border spinner-border-sm d-none"
            id="micSpinner"
            role="status"
            aria-hidden="true"
          ></span>
          <span id="micText">üéôÔ∏è Start</span>
        </button>
        <button type="button" onclick="clearInput()" class="btn btn-danger" aria-label="Clear input">
          Clear
        </button>
        <button
          id="translateBtn"
          type="button"
          onclick="translateText()"
          class="btn btn-success"
          aria-label="Translate text"
        >
          <span class="spinner-border spinner-border-sm d-none" id="translateSpinner" role="status" aria-hidden="true"></span>
          Translate
        </button>
      </div>

      <div class="d-flex gap-2">
        <button type="button" onclick="speakOutput()" class="btn btn-info" aria-label="Listen to output">
          üîä Listen
        </button>
        <button type="button" onclick="copyInput()" class="btn btn-outline-secondary" aria-label="Copy input text">
          üìã Copy Input
        </button>
        <button type="button" onclick="copyOutput()" class="btn btn-outline-secondary" aria-label="Copy output text">
          üìã Copy Output
        </button>
      </div>
    </div>

    <div class="char-buttons mb-3">
      <label class="form-label">Insert Punctuation:</label><br />
      <button type="button" onclick="insertChar('.')"
        class="btn btn-light">.</button>
      <button type="button" onclick="insertChar(',')"
        class="btn btn-light">,</button>
      <button type="button" onclick="insertChar('?')"
        class="btn btn-light">?</button>
      <button type="button" onclick="insertChar('!')"
        class="btn btn-light">!</button>
      <button type="button" onclick="insertChar(';')"
        class="btn btn-light">;</button>
      <button type="button" onclick="insertChar(':')"
        class="btn btn-light">:</button>
    </div>

    <div class="mb-3">
      <label for="outputText" class="form-label">Translated Output</label>
      <div class="position-relative">
        <textarea
          id="outputText"
          class="form-control expandable-text"
          rows="4"
          readonly
          aria-label="Translated output"
          placeholder="Translation will appear here..."
        ></textarea>
        <button
          class="btn btn-sm btn-outline-secondary position-absolute top-0 end-0 m-1"
          onclick="toggleFullscreen('outputText')"
          aria-label="Toggle fullscreen for output textarea"
          title="Toggle fullscreen"
        >‚§¢</button>
      </div>
    </div>

    <div id="toastContainer" class="toast-container position-fixed bottom-0 end-0 p-3"></div>
  </div>

  <script>
    const inputLang = document.getElementById('inputLang');
    const outputLang = document.getElementById('outputLang');
    const inputText = document.getElementById('inputText');
    const outputText = document.getElementById('outputText');
    const micSpinner = document.getElementById('micSpinner');
    const micText = document.getElementById('micText');
    const startBtn = document.getElementById('startBtn');
    const translateBtn = document.getElementById('translateBtn');
    const translateSpinner = document.getElementById('translateSpinner');

    // Show a toast notification
    function showToast(message, type = 'success') {
      const toast = document.createElement('div');
      toast.className = `toast align-items-center text-white bg-${type} border-0 show`;
      toast.setAttribute('role', 'alert');
      toast.innerHTML = `
        <div class="d-flex">
          <div class="toast-body">${message}</div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      `;
      const container = document.getElementById('toastContainer');
      container.appendChild(toast);
      setTimeout(() => toast.remove(), 3000);
    }

    // Start speech recognition
    function startDictation() {
      if ('webkitSpeechRecognition' in window) {
        const recognition = new webkitSpeechRecognition();
        recognition.lang = inputLang.value === 'auto' ? 'bn-BD' : inputLang.value;
        recognition.continuous = false;
        recognition.interimResults = false;

        recognition.onstart = () => {
          startBtn.classList.add('listening');
          startBtn.disabled = true;
          micText.textContent = 'üéôÔ∏è Listening...';
          micSpinner.classList.remove('d-none');
        };

        recognition.onresult = event => {
          inputText.value += (inputText.value ? ' ' : '') + event.results[0][0].transcript;
        };

        recognition.onerror = event => {
          alert('Speech recognition error: ' + event.error);
          resetMic();
        };

        recognition.onend = () => resetMic();
        recognition.start();
      } else {
        alert('Speech Recognition is not supported in this browser.');
      }
    }

    // Reset microphone button state
    function resetMic() {
      startBtn.classList.remove('listening');
      startBtn.disabled = false;
      micText.textContent = 'üéôÔ∏è Start';
      micSpinner.classList.add('d-none');
    }

    // Clear input and output textareas
    function clearInput() {
      inputText.value = '';
      outputText.value = '';
    }

    // Swap input and output languages
    function swapLanguages() {
      if (inputLang.value === 'auto') return;
      const temp = inputLang.value;
      inputLang.value = outputLang.value;
      outputLang.value = temp;
    }

    // Speak the translated output
    function speakOutput() {
      const text = outputText.value.trim();
      if (!text) {
        alert('There is no output text to speak.');
        return;
      }
      if ('speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = outputLang.value;
        window.speechSynthesis.cancel();
        window.speechSynthesis.speak(utterance);
      } else {
        alert('Text-to-Speech is not supported in this browser.');
      }
    }

    // Insert punctuation characters into input
    function insertChar(char) {
      inputText.value += char;
    }

    // Copy input text to clipboard
    function copyInput() {
      navigator.clipboard.writeText(inputText.value).then(() => {
        showToast('Input copied!', 'success');
      }).catch(() => {
        showToast('Failed to copy input.', 'danger');
      });
    }

    // Copy output text to clipboard
    function copyOutput() {
      navigator.clipboard.writeText(outputText.value).then(() => {
        showToast('Output copied!', 'success');
      }).catch(() => {
        showToast('Failed to copy output.', 'danger');
      });
    }

    // Toggle fullscreen mode for textareas
    function toggleFullscreen(id) {
      const el = document.getElementById(id);
      if (!document.fullscreenElement) {
        el.requestFullscreen().catch(() => {
          alert('Fullscreen mode is not supported by this browser.');
        });
      } else {
        document.exitFullscreen();
      }
    }

    // Perform translation via Google Translate unofficial API
    async function translateText() {
      const text = inputText.value.trim();
      if (!text) {
        alert('Please enter text to translate.');
        return;
      }
      translateBtn.disabled = true;
      translateSpinner.classList.remove('d-none');
      try {
        const res = await fetch(
          `https://translate.googleapis.com/translate_a/single?client=gtx&sl=${inputLang.value}&tl=${outputLang.value}&dt=t&q=${encodeURIComponent(text)}`
        );
        const data = await res.json();
        outputText.value = data[0].map(item => item[0]).join('');
      } catch (err) {
        console.error('Translation error:', err);
        alert('Translation failed. Check your connection.');
      } finally {
        translateBtn.disabled = false;
        translateSpinner.classList.add('d-none');
      }
    }
  </script>
</body>
</html>
